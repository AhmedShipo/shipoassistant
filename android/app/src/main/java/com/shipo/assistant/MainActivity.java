package "com.shipo.assistant;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.speech.RecognitionListener;
import android.speech.RecognizerIntent;
import android.speech.SpeechRecognizer;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import java.io.IOException;

public class MainActivity extends AppCompatActivity {

    private static final int REQUEST_RECORD_AUDIO_PERMISSION = 200;
    private static final int REQUEST_FILE_PICKER = 1;

    private TextView welcomeMessage;
    private EditText userInput;
    private Button sendButton, micButton, attachButton, thinkModeButton, deepSearchButton;
    private Toolbar toolbar;
    private SpeechRecognizer speechRecognizer;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        // ุชููุฆุฉ ุงูุนูุงุตุฑ
        welcomeMessage = findViewById(R.id.welcome_message);
        userInput = findViewById(R.id.user_input);
        sendButton = findViewById(R.id.send_button);
        micButton = findViewById(R.id.mic_button);
        attachButton = findViewById(R.id.attach_button);
        thinkModeButton = findViewById(R.id.think_mode_button);
        deepSearchButton = findViewById(R.id.deep_search_button);
        toolbar = findViewById(R.id.toolbar);

        // ุฅุนุฏุงุฏ ุงูุดุฑูุท ุงูุนููู
        setSupportActionBar(toolbar);
        if (getSupportActionBar() != null) {
            getSupportActionBar().setTitle(getString(R.string.app_name));
        }

        // ุนุฑุถ ุฑุณุงูุฉ ุงูุชุฑุญูุจ
        String userName = "ุฃุญูุฏ ุดูุจู";
        welcomeMessage.setText(String.format(getString(R.string.welcome_message), userName, "ููุฑู"));

        // ุชููุฆุฉ SpeechRecognizer
        speechRecognizer = SpeechRecognizer.createSpeechRecognizer(this);
        setupSpeechRecognizer();

        // ุทูุจ ุงูุฃุฐููุงุช ุฅุฐุง ูุฒู ุงูุฃูุฑ
        requestPermissionsIfNeeded();

        // ูุนุงูุฌุฉ ุฒุฑ ุงูุฅุฑุณุงู
        sendButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String inputText = userInput.getText().toString().trim();
                if (!inputText.isEmpty()) {
                    welcomeMessage.append("\nุฃูุช: " + inputText);
                    userInput.setText("");
                }
            }
        });

        // ูุนุงูุฌุฉ ุฒุฑ ุงููููุฑูููู
        micButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.RECORD_AUDIO)
                        == PackageManager.PERMISSION_GRANTED) {
                    startSpeechToText();
                } else {
                    ActivityCompat.requestPermissions(MainActivity.this,
                            new String[]{Manifest.permission.RECORD_AUDIO}, REQUEST_RECORD_AUDIO_PERMISSION);
                }
            }
        });

        // ูุนุงูุฌุฉ ุฒุฑ ุงูุฅุฑูุงู
        attachButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
                intent.setType("*/*");
                startActivityForResult(intent, REQUEST_FILE_PICKER);
            }
        });

        // ูุนุงูุฌุฉ ุฒุฑ Think Mode
        thinkModeButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String inputText = userInput.getText().toString().trim();
                if (!inputText.isEmpty()) {
                    welcomeMessage.append("\nููุฑู: ุฌุงุฑู ุงูุชูููุฑ ุจุนูู ูู: " + inputText + "...");
                    userInput.setText("");
                    new Thread(() -> {
                        String result = analyzeWithThinkMode(inputText);
                        runOnUiThread(() -> welcomeMessage.append("\nููุฑู: ุงูุชุญููู: " + result));
                    }).start();
                } else {
                    Toast.makeText(MainActivity.this, "ูุฑุฌู ูุชุงุจุฉ ูุต ุฃููุงู!", Toast.LENGTH_SHORT).show();
                }
            }
        });

        // ูุนุงูุฌุฉ ุฒุฑ Deep Search
        deepSearchButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String inputText = userInput.getText().toString().trim();
                if (!inputText.isEmpty()) {
                    welcomeMessage.append("\nููุฑู: ุฌุงุฑู ุงูุจุญุซ ุงูุนููู ุนู: " + inputText + "...");
                    userInput.setText("");
                    new Thread(() -> {
                        try {
                            String result = performDeepSearch(inputText);
                            runOnUiThread(() -> welcomeMessage.append("\nููุฑู: ุงููุชุงุฆุฌ: " + result));
                        } catch (IOException e) {
                            runOnUiThread(() -> welcomeMessage.append("\nููุฑู: ุนุฐุฑูุง ูุง ุญุจูุจูุ ููู ูุดููุฉ ูู ุงูุงุชุตุงู ุจุงูุฅูุชุฑูุชุ ุฌุฑุจ ุชุงูู! ๐"));
                        }
                    }).start();
                } else {
                    Toast.makeText(MainActivity.this, "ูุฑุฌู ูุชุงุจุฉ ูุต ุฃููุงู!", Toast.LENGTH_SHORT).show();
                }
            }
        });
    }

    private void setupSpeechRecognizer() {
        speechRecognizer.setRecognitionListener(new RecognitionListener() {
            @Override
            public void onReadyForSpeech(Bundle params) {
                runOnUiThread(() -> welcomeMessage.append("\nููุฑู: ุฌุงูุฒุฉ ููุณูุงุนุ ุชุญุฏุซ ุงูุขู!"));
            }

            @Override
            public void onBeginningOfSpeech() {}

            @Override
            public void onRmsChanged(float rmsdB) {}

            @Override
            public void onBufferReceived(byte[] buffer) {}

            @Override
            public void onEndOfSpeech() {}

            @Override
            public void onError(int error) {
                runOnUiThread(() -> welcomeMessage.append("\nููุฑู: ุญุฏุซ ุฎุทุฃ ูู ุงูุชุนุฑู ุนูู ุงูุตูุชุ ุญุงูู ูุฑุฉ ุฃุฎุฑู!"));
            }

            @Override
            public void onResults(Bundle results) {
                ArrayList<String> matches = results.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION);
                if (matches != null && !matches.isEmpty()) {
                    String speechText = matches.get(0);
                    runOnUiThread(() -> {
                        userInput.setText(speechText);
                        welcomeMessage.append("\nุฃูุช (ุตูุช): " + speechText);
                    });
                }
            }

            @Override
            public void onPartialResults(Bundle partialResults) {}

            @Override
            public void onEvent(int eventType, Bundle params) {}
        });
    }

    private void startSpeechToText() {
        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, "ar-EG");
        intent.putExtra(RecognizerIntent.EXTRA_PROMPT, "ุชุญุฏุซ ุงูุขู...");
        speechRecognizer.startListening(intent);
    }

    private String analyzeWithThinkMode(String input) {
        StringBuilder analysis = new StringBuilder();
        analysis.append("ุชุญููู ููุทูู: \n");

        // 1. ุชุญููู ุนุฏุฏ ุงููููุงุช ูุงูุญุฑูู (ุชุญููู ุฃููู)
        String[] words = input.split("\\s+");
        int wordCount = words.length;
        int charCount = input.length();
        analysis.append("ุงููุต ูุญุชูู ุนูู ").append(wordCount).append(" ูููุฉ ู").append(charCount).append(" ุญุฑู.\n");

        // 2. ุชุญููู ุงููุบุฉ (ุชุญููู ุณููุงูุทููู ุฃููู)
        int arabicChars = 0;
        for (char c : input.toCharArray()) {
            if (Character.UnicodeBlock.of(c) == Character.UnicodeBlock.ARABIC) {
                arabicChars++;
            }
        }
        if (arabicChars == input.length()) {
            analysis.append("ุงููุต ุจุงููุงูู ุจุงููุบุฉ ุงูุนุฑุจูุฉ.\n");
        } else if (arabicChars > 0) {
            analysis.append("ุงููุต ูุญุชูู ุนูู ุฎููุท ูู ุงููุบุฉ ุงูุนุฑุจูุฉ ูุบูุฑูุง.\n");
        } else {
            analysis.append("ุงููุต ููุณ ุจุงููุบุฉ ุงูุนุฑุจูุฉ.\n");
        }

        // 3. ุชุญููู ููุน ุงูุฌููุฉ (ุชุญููู ุงุณุชูุจุงุทู ูุน ุชุฌูุจ ูุบุงูุทุฉ ุงูุณุจุจ ุงูุฒุงุฆู)
        if (input.matches(".*(ูุง|ููู|ููุงุฐุง|ูู|ูู).*\\?") && !input.contains("!")) {
            analysis.append("ุงููุต ูุญุชูู ุนูู ุณุคุงู (ุชุญููู ุงุณุชูุจุงุทู).\n");
        } else if (input.contains("ุ") && input.contains("!")) {
            analysis.append("ุงููุต ูุฏ ูููู ุชุนุจูุฑูุง ุจูุงุบููุง (ุชุญููู ููุฏู).\n");
        } else {
            analysis.append("ุงููุต ูุฏ ูููู ุฌููุฉ ุฅุฎุจุงุฑูุฉ (ุชุญููู ุงุณุชูุจุงุทู).\n");
        }

        // 4. ุชุญููู ุงููุดุงุนุฑ (ุชุญููู ุงุณุชูุฑุงุฆู ูุน ูุดู ูุบุงูุทุฉ ุงูุชุนููู ุงููุชุณุฑุน)
        String[] positiveWords = {"ุฌููู", "ุญูู", "ุฑุงุฆุน", "ููุชุงุฒ", "ุณุนูุฏ"};
        String[] negativeWords = {"ุณูุก", "ุญุฒูู", "ูุดููุฉ", "ุตุนุจ", "ุณูุฆ"};
        boolean hasPositive = false, hasNegative = false;
        for (String word : words) {
            for (String pos : positiveWords) {
                if (word.contains(pos)) {
                    hasPositive = true;
                    break;
                }
            }
            for (String neg : negativeWords) {
                if (word.contains(neg)) {
                    hasNegative = true;
                    break;
                }
            }
        }
        // ุชุญููู ุณูุงูู ูุชุฌูุจ ุงูุชุนููู ุงููุชุณุฑุน
        if (hasPositive && !hasNegative) {
            if (input.contains("ูุณุช") || input.contains("ุบูุฑ")) {
                analysis.append("ุงููุต ูุฏ ูุญุชูู ุนูู ูุดุงุนุฑ ุณูุจูุฉ ุจุณุจุจ ุงูููู (ุชุญููู ุณููุงูุทููู).\n");
            } else {
                analysis.append("ุงููุต ูุญุชูู ุนูู ูุดุงุนุฑ ุฅูุฌุงุจูุฉ (ุชุญููู ุงุณุชูุฑุงุฆู).\n");
            }
        } else if (hasNegative && !hasPositive) {
            if (input.contains("ูุณุช") || input.contains("ุบูุฑ")) {
                analysis.append("ุงููุต ูุฏ ูุญุชูู ุนูู ูุดุงุนุฑ ุฅูุฌุงุจูุฉ ุจุณุจุจ ุงูููู (ุชุญููู ุณููุงูุทููู).\n");
            } else {
                analysis.append("ุงููุต ูุญุชูู ุนูู ูุดุงุนุฑ ุณูุจูุฉ (ุชุญููู ุงุณุชูุฑุงุฆู).\n");
            }
        } else if (hasPositive && hasNegative) {
            analysis.append("ุงููุต ูุญุชูู ุนูู ูุดุงุนุฑ ูุฎุชูุทุฉ (ุชุญููู ููุฏู).\n");
        } else {
            analysis.append("ุงููุต ูุญุงูุฏ ูู ุญูุซ ุงููุดุงุนุฑ (ุชุญููู ุงุณุชูุฑุงุฆู).\n");
        }

        // 5. ุชุญููู ุจููุฉ ุงูุฌููุฉ (ุชุญููู ุจูููู)
        if (wordCount <= 3) {
            analysis.append("ุงููุต ูุตูุฑ ุฌุฏูุงุ ูุฏ ูููู ุนุจุงุฑุฉ ุฃู ุฌููุฉ ุจุณูุทุฉ (ุชุญููู ุจูููู).\n");
        } else if (wordCount <= 10) {
            if (input.contains("ูุฃู") || input.contains("ุจุณุจุจ")) {
                analysis.append("ุงููุต ูุชูุณุท ุงูุทููุ ูุญุชูู ุนูู ุนูุงูุฉ ุณุจุจูุฉ (ุชุญููู ุจูููู).\n");
            } else {
                analysis.append("ุงููุต ูุชูุณุท ุงูุทููุ ูุฏ ูููู ุฌููุฉ ูุนุชุฏูุฉ ุงูุชุนููุฏ (ุชุญููู ุจูููู).\n");
            }
        } else {
            analysis.append("ุงููุต ุทูููุ ูุฏ ูููู ุฌููุฉ ูุนูุฏุฉ ุฃู ุนุฏุฉ ุฌูู (ุชุญููู ุจูููู).\n");
        }

        // 6. ุชุญููู ุณูุงูู ุจุงุณุชุฎุฏุงู scriptural_logic.js (ุชุญููู ุฑูุฒู ูุชุฑููุจู)
        Map<String, Object> beliefContext = new HashMap<>();
        beliefContext.put("tawheed", input.contains("ุชูุญูุฏ"));
        beliefContext.put("messengers", input.contains("ุฑุณูู"));
        beliefContext.put("divineDecree", input.contains("ูุฏุฑ"));
        beliefContext.put("dayOfJudgment", input.contains("ููู ุงูููุงูุฉ"));

        // ุชุญููู ุฑูุฒู: (ุชูุญูุฏ โง ยฌุดุฑู)
        boolean tawheed = (boolean) beliefContext.get("tawheed");
        boolean shirk = input.contains("ุดุฑู");
        if (tawheed && !shirk) {
            analysis.append("ุงููุต ูุนุฒุฒ ุงูุชูุญูุฏ ููุง ูุญุชูู ุนูู ุดุฑู (ุชุญููู ุฑูุฒู: ุชูุญูุฏ โง ยฌุดุฑู).\n");
        } else if (shirk) {
            analysis.append("ุงููุต ูุญุชูู ุนูู ุดุฑู (ุชุญููู ุฑูุฒู: ุดุฑู โจ ยฌุชูุญูุฏ).\n");
        }

        // ุชุญููู ุจูุงุกู ุนูู ุงููุฑุขู
        Map<String, Object> quranContext = new HashMap<>();
        quranContext.put("action", input);
        quranContext.put("source", "ุงููุฑุขู ุงููุฑูู");
        quranContext.put("beliefContext", beliefContext);
        String quranAnalysis = analyzeScripturalLogic(quranContext);
        analysis.append("ุชุญููู ูุตู (ุงููุฑุขู): ").append(quranAnalysis).append("\n");

        // ุชุญููู ุจูุงุกู ุนูู ุงูุณูุฉ
        Map<String, Object> sunnahContext = new HashMap<>();
        sunnahContext.put("action", input);
        sunnahContext.put("source", "ุงูุณูุฉ ุงูุตุญูุญุฉ");
        sunnahContext.put("beliefContext", beliefContext);
        String sunnahAnalysis = analyzeScripturalLogic(sunnahContext);
        analysis.append("ุชุญููู ูุตู (ุงูุณูุฉ): ").append(sunnahAnalysis).append("\n");

        // ุชุญููู ุชุฑููุจู: ุฌูุน ุจูู ุงููุดุงุนุฑ ูุงูุณูุงู ุงูุดุฑุนู
        if (hasPositive && tawheed && !shirk) {
            analysis.append("ุงููุต ุฅูุฌุงุจู ููุชูุงูู ูุน ุงูุชูุญูุฏ (ุชุญููู ุชุฑููุจู).\n");
        } else if (hasNegative && shirk) {
            analysis.append("ุงููุต ุณูุจู ููุญุชูู ุนูู ุดุฑู (ุชุญููู ุชุฑููุจู).\n");
        }

        // 7. ุชุญููู ุงููููุฌ ุจุงุณุชุฎุฏุงู manhaj_analysis.js
        Map<String, Object> manhajContext = new HashMap<>();
        manhajContext.put("action", input);
        manhajContext.put("source", input.contains("ุญุฏูุซ") ? "ุญุฏูุซ" : "ูุฑุขู");
        manhajContext.put("evidenceLevel", "ุญุณู");
        String manhajAnalysis = analyzeManhaj(manhajContext);
        analysis.append("ุชุญููู ุงููููุฌ: ").append(manhajAnalysis).append("\n");

        // 8. ุชูููู ุฃุฎูุงูู ุจุงุณุชุฎุฏุงู ethicalDecisionMaking.js (ุชุญููู ููุฏู)
        Map<String, Object> ethicalContext = new HashMap<>();
        ethicalContext.put("action", input);
        ethicalContext.put("intent", input.contains("ุฅุฎูุงุต") ? "ุฅุฎูุงุต ููู" : "ุบูุฑ ูุงุถุญ");
        ethicalContext.put("impact", hasPositive ? "ูุตูุญุฉ" : (hasNegative ? "ุถุฑุฑ" : "ูุญุงูุฏ"));
        String ethicalAnalysis = evaluateEthicalDecision(ethicalContext);
        analysis.append("ุงูุชูููู ุงูุฃุฎูุงูู: ").append(ethicalAnalysis).append("\n");

        // 9. ูุดู ุงููุบุงูุทุงุช ูุงููุตุงุฆุฏ
        // ูุบุงูุทุฉ ุงูุซูุงุฆูุฉ ุงูุฒุงุฆูุฉ ูู ุงููุดุงุนุฑ
        if (hasPositive && hasNegative) {
            if (input.contains("ุณุฎุฑูุฉ") || input.contains("ุชููู")) {
                analysis.append("ุชุญุฐูุฑ: ุงููุต ูุฏ ูุญุชูู ุนูู ุณุฎุฑูุฉุ ูุฏ ุชููู ููุงู ูุบุงูุทุฉ ุซูุงุฆูุฉ ุฒุงุฆูุฉ (ุชุญููู ููุฏู).\n");
            }
        }

        // ูุตูุฏุฉ ุงูุณุคุงู ุงููุฑูุจ
        if (input.matches(".*(ูู ุชูููุช|ูู ูููุช).*")) {
            analysis.append("ุชุญุฐูุฑ: ุงููุต ูุฏ ูุญุชูู ุนูู ุณุคุงู ูุฑูุจ (ูุตูุฏุฉ ููุทููุฉ).\n");
        }

        // ูุตูุฏุฉ ุชุดุชูุช ุงูุงูุชุจุงู
        if (wordCount > 10 && input.contains("ุ")) {
            String[] sentences = input.split("ุ");
            if (sentences.length > 2) {
                analysis.append("ุชุญุฐูุฑ: ุงููุต ูุฏ ูุญุชูู ุนูู ููุงุถูุน ุฌุงูุจูุฉ (ูุตูุฏุฉ ุชุดุชูุช ุงูุงูุชุจุงู).\n");
            }
        }

        return analysis.toString();
    }

    private String performDeepSearch(String query) throws IOException {
        StringBuilder result = new StringBuilder();
        String searchUrl = "https://ar.wikipedia.org/w/index.php?search=" + Uri.encode(query);
        
        // ุงูุชุญูู ูู ุงููุตุฏุฑ ุจุงุณุชุฎุฏุงู knowledgeSources.js
        if (!validateSource("ููููุจูุฏูุง (ูุณุฎุฉ ูุญุฏุฏุฉ)")) {
            return "ุงููุตุฏุฑ ุบูุฑ ููุซูู ุจูุงุกู ุนูู ูุนุงููุฑ ุงูููุงุตุฏ ูุงูุฃุฎูุงู.";
        }

        try {
            Document doc = Jsoup.connect(searchUrl).get();
            Elements paragraphs = doc.select("p");
            if (!paragraphs.isEmpty()) {
                StringBuilder content = new StringBuilder();
                for (int i = 0; i < Math.min(3, paragraphs.size()); i++) {
                    Element p = paragraphs.get(i);
                    String text = p.text().trim();
                    if (text.length() > 50) {
                        content.append(text).append("\n");
                    }
                }
                if (content.length() > 0) {
                    String extractedContent = content.toString().substring(0, Math.min(500, content.length())) + "...";
                    result.append("ุงููุนูููุงุช: ").append(extractedContent).append("\n");

                    // ุชุญููู ุณูุงูู ูููุญุชูู ุงููุณุชุฎุฑุฌ
                    result.append("ุชุญููู ุงููุญุชูู:\n");
                    result.append(analyzeWithThinkMode(extractedContent));
                } else {
                    result.append("ูู ุฃุฌุฏ ูุนูููุงุช ูุงููุฉ.\n");
                }
            } else {
                result.append("ูู ุฃุฌุฏ ูุชุงุฆุฌ ูุทุงุจูุฉ.\n");
            }
            result.append("ูุฑุฌุน: ").append(searchUrl).append("\n");
        } catch (IOException e) {
            throw new IOException("ูุดู ูู ุงูุงุชุตุงู ุจุงูููุจ");
        }
        return result.toString();
    }

    // ูุญุงูุงุฉ ุฏุงูุฉ validateSource ูู knowledgeSources.js
    private boolean validateSource(String sourceName) {
        double reliability = 0.0;
        if (sourceName.equals("ููููุจูุฏูุง (ูุณุฎุฉ ูุญุฏุฏุฉ)")) reliability = 0.7;
        else if (sourceName.equals("ุงูููุชุจุฉ ุงูุดุงููุฉ")) reliability = 0.95;
        double harm = sourceName.contains("ุบูุฑ ููุซูู") ? 0.8 : 0.0;
        double benefit = reliability - harm;
        return benefit > 0.5;
    }

    // ูุญุงูุงุฉ ุฏุงูุฉ analyzeScripturalLogic ูู scriptural_logic.js
    private String analyzeScripturalLogic(Map<String, Object> context) {
        String action = (String) context.get("action");
        String source = (String) context.get("source");
        Map<String, Boolean> beliefContext = (Map<String, Boolean>) context.get("beliefContext");

        if (source.equals("ุงููุฑุขู ุงููุฑูู")) {
            if (beliefContext.get("tawheed") && action.contains("ุชูุญูุฏ") && !action.contains("ุดุฑู")) {
                return "ุงููุนู ูุชูุงูู ูุน ุงููุฑุขู ููุนุฒุฒ ุงูุชูุญูุฏ";
            }
            if (action.contains("ุดุฑู") || action.contains("ุจุฏุนุฉ")) {
                return "ุงููุนู ููุงูุถ ุงููุฑุขู ููุคุฏู ุฅูู ุงูุดุฑู ุฃู ุงูุจุฏุนุฉ";
            }
            if (action.contains("ุธูู") || action.contains("ูุฐุจ")) {
                return "ุงููุนู ูุญุธูุฑ ุจูุงุกู ุนูู ุงููุฑุขู (ุงูุธูู ุธููุงุช ููู ุงูููุงูุฉ)";
            }
            if (beliefContext.get("dayOfJudgment") && action.contains("ููู ุงูููุงูุฉ")) {
                return "ุงููุนู ูุชูุงูู ูุน ุงููุฑุขู ููุนุฒุฒ ุงูุฅููุงู ุจุงูููู ุงูุขุฎุฑ";
            }
            return "ุงููุนู ูุง ูุชุนุงุฑุถ ูุน ุงููุฑุขู ูููู ูุญุชุงุฌ ุฅูู ุฏููู ุฅุถุงูู";
        } else if (source.equals("ุงูุณูุฉ ุงูุตุญูุญุฉ")) {
            if (beliefContext.get("messengers") && action.contains("ุฑุณูู")) {
                return "ุงููุนู ูุชูุงูู ูุน ุงูุณูุฉ ููุนุฒุฒ ุงุชุจุงุน ุงูุฑุณูู";
            }
            if (action.contains("ุจุฏุนุฉ")) {
                return "ุงููุนู ููุงูุถ ุงูุณูุฉ ููุคุฏู ุฅูู ุงูุจุฏุนุฉ";
            }
            if (beliefContext.get("divineDecree") && action.contains("ูุฏุฑ")) {
                return "ุงููุนู ูุชูุงูู ูุน ุงูุณูุฉ ููุนุฒุฒ ุงูุฅููุงู ุจุงููุฏุฑ";
            }
            return "ุงููุนู ูุง ูุชุนุงุฑุถ ูุน ุงูุณูุฉ ูููู ูุญุชุงุฌ ุฅูู ุชุฏููู ุฅุถุงูู";
        }
        return "ุงููุตุฏุฑ ุบูุฑ ูุฏุนูู ููุชุญููู ุงููุตู";
    }

    // ูุญุงูุงุฉ ุฏุงูุฉ analyzeManhaj ูู manhaj_analysis.js
    private String analyzeManhaj(Map<String, Object> context) {
        String action = (String) context.get("action");
        String source = (String) context.get("source");
        String evidenceLevel = (String) context.get("evidenceLevel");

        if (source.contains("ุญุฏูุซ")) {
            if (evidenceLevel.equals("ุตุญูุญ") && action.contains("ุนุจุงุฏุฉ")) return "ูุชูุงูู ูุน ูููุฌ ุฃูู ุงูุญุฏูุซ";
            if (evidenceLevel.equals("ุญุณู") && action.contains("ุชูููุฏ")) return "ูุงุจู ููุชุทุจูู ูุน ุญุฐุฑ";
            if (evidenceLevel.equals("ุถุนูู")) return "ุบูุฑ ููุจูู ุฅูุง ููุชุดุฌูุน";
            return "ูุญุชุงุฌ ุชุฏููููุง ุฅุถุงูููุง";
        } else if (source.contains("ูุฑุขู")) {
            if (action.contains("ุชูุญูุฏ")) return "ูุชูุงูู ุชูุงููุง ูุน ูููุฌ ุงูุณูู";
            if (action.contains("ุจุฏุนุฉ")) return "ุบูุฑ ูุชูุงูู ููุญุฐูุฑ";
            return "ูุญุชุงุฌ ุฅูู ุชูุณูุฑ ุฏููู";
        }
        return "ุฎุงุฑุฌ ุงููููุฌ ุงูุชูููุฏูุ ูุญุชุงุฌ ูุฑุงุฌุนุฉ ุฃูู ุงูุนูู";
    }

    // ูุญุงูุงุฉ ุฏุงูุฉ evaluateEthicalDecision ูู ethicalDecisionMaking.js
    private String evaluateEthicalDecision(Map<String, Object> context) {
        String action = (String) context.get("action");
        String intent = (String) context.get("intent");
        String impact = (String) context.get("impact");

        // ุชูููู ุงูููุฉ
        String intentAnalysis;
        if (intent.contains("ุฅุฎูุงุต") || intent.contains("ููู")) {
            intentAnalysis = "ููุจูู";
        } else if (intent.contains("ุฑูุงุก") || intent.contains("ุดูุฑุฉ")) {
            intentAnalysis = "ูุฑููุถ ุจุณุจุจ ุงูุฑูุงุก";
        } else {
            intentAnalysis = "ุบูุฑ ูุงุถุญุ ูุญุชุงุฌ ุฅูู ุชูุถูุญ";
        }
        if (!intentAnalysis.equals("ููุจูู")) return "ูุญุธูุฑ ุจุณุจุจ ุงูููุฉ: " + intentAnalysis;

        // ุชูููู ุงูุฃุซุฑ
        String impactAnalysis;
        if (impact.contains("ุถุฑุฑ") || impact.contains("ูุณุงุฏ")) {
            impactAnalysis = "ุถุงุฑ";
        } else if (impact.contains("ูุตูุญุฉ") || impact.contains("ุฎูุฑ")) {
            impactAnalysis = "ูุงูุน";
        } else {
            impactAnalysis = "ูุญุงูุฏ";
        }
        if (impactAnalysis.equals("ุถุงุฑ")) return "ูุญุธูุฑ ุจุณุจุจ ุงูุฃุซุฑ: " + impact;

        // ุชูููู ุงููุนู
        if (action.contains("ุญุฑุงู") || action.contains("ุธูู")) return "ูุญุธูุฑ";
        if (action.contains("ูุงุฌุจ") || action.contains("ุนุฏู") || impact.contains("ูุตูุญุฉ")) return "ูุทููุจ";
        if (action.contains("ูุจุงุญ")) return "ุฌุงุฆุฒ";
        return "ูุญุชุงุฌ ุฅูู ุชูููู ุฅุถุงูู";
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQUEST_FILE_PICKER && resultCode == RESULT_OK && data != null) {
            Uri fileUri = data.getData();
            if (fileUri != null) {
                runOnUiThread(() -> welcomeMessage.append("\nููุฑู: ุชู ุงุฎุชูุงุฑ ููู: " + fileUri.getLastPathSegment()));
            }
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == REQUEST_RECORD_AUDIO_PERMISSION) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                startSpeechToText();
            } else {
                Toast.makeText(this, "ุงูุฅุฐู ูุทููุจ ูุงุณุชุฎุฏุงู ุงููููุฑูููู!", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void requestPermissionsIfNeeded() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO)
                != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this,
                    new String[]{Manifest.permission.RECORD_AUDIO}, REQUEST_RECORD_AUDIO_PERMISSION);
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (speechRecognizer != null) {
            speechRecognizer.destroy();
        }
    }
}